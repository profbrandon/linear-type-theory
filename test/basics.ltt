#=============== BASICS.LTT ===============#
# Author: Brandon Harrington               #
# Date: 11/21/2019                         #
#                                          #
# Contains some basic functions (hence the #
# name) that are part of category theory.  #
#==========================================#


#---------------------------------------------------------#
# Here we start with some basic definitions from category #
# theory, i.e. identity morphisms, composition, and some  #
# basic functors.                                         #
#---------------------------------------------------------#

# The polymorphic identity function for U@1. Note that in 
  the categorical sense, the polymorphic nature is exactly
  that the identity morphisms are a natural transformation
  between the identity functor and itself.                 #

Define id 
    := \A : U@1, x : A. x ;

Typeof id ;


# Polymorphic composition in the normal sense #

Define compose 
    := \A B C : U@1, g : B -+ C, f : A -+ B, x : A.
            g (f x) ;

Typeof compose ;



#----------------------------------------------------------#
# Here we implement some functorial actions of some of the #
# data types, pairs, sums, and linear implications.        #
#----------------------------------------------------------#

# The functorial action of pairs in their first 
  component. This is the first time in this file
  that we encounter pair recursion.              #

Define lift_pair1
    := \A B X : U@1, f : A -+ X, w : A @ B.
            rec@ (X @ B, \a : A, b : B. (f a) @ b, w) ;

Typeof lift_pair1 ;


# The functorial action of pairs in their second
  component.                                     #

Define lift_pair2
    := \A B Y : U@1, g : B -+ Y, w : A @ B.
            rec@ (A @ Y, \a : A, b : B. a @ (g b), w) ;

Typeof lift_pair2 ;


# The cofunctorial action of linear implications
  in their first argument.                       #

Define lift_imp1
    := \A B X : U@1, f : X -+ A, w : A -+ B.
            \x : X. w (f x) ;

Typeof lift_imp1 ;


# The functorial action of linear implications
  in their second argument.                    #

Define lift_imp2
    := \A B Y : U@1, f : B -+ Y, w : A -+ B.
            \a : A. f (w a) ;

Typeof lift_imp2 ;


Define lift_sum
    := \A B X 