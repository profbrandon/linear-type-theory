
Define id := \A : U@1, x : A. x ;

Define curry := \A B C : U@1, f : (A @ B) -+ C, x : A, y : B. f (x @ y) ;

Define uncurry := \A B C : U@1, f : A -+ B -+ C, w : A @ B. rec@ (C, f, w) ;

Define compose := \A B C : U@1, g : B -+ C, f : A -+ B, x : A. g (f x) ;

Define functPairLeft  := \A B C : U@1, f : A -+ C, w : A @ B. rec@ (C @ B, \a : A, b : B. (f a) @ b, w) ;

Define functPairRight := \A B C : U@1, g : B -+ C, w : A @ B. rec@ (A @ C, \a : A, b : B. a @ (g b), w) ;

Define univPropPair := \A B C : U@1, f : C -+ A, g : C -+ B, w : C @ C. rec@ (A @ B, \x y : C. (f x) @ (g y), w) ;


Typeof id ;
Typeof curry ;
Typeof uncurry ;
Typeof compose ;